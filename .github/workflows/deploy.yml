name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install frappe-bench
        
    - name: Run tests
      run: |
        echo "Running Ultra Spec ERP tests..."
        # Add your test commands here
        echo "Tests passed!"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to Production
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.PRODUCTION_HOST }}
        username: ${{ secrets.PRODUCTION_USER }}
        key: ${{ secrets.PRODUCTION_SSH_KEY }}
        port: ${{ secrets.PRODUCTION_PORT || 22 }}
        script: |
          # Navigate to deployment directory
          cd /home/frappe/auto-deploy
          
          # Run deployment script
          ./deploy.sh
          
          # Check deployment status
          if [ $? -eq 0 ]; then
            echo "‚úÖ Deployment successful!"
            
            # Send success notification (optional)
            curl -X POST -H 'Content-type: application/json' \
              --data '{"text":"üöÄ Ultra Spec ERP deployed successfully to production!"}' \
              ${{ secrets.SLACK_WEBHOOK_URL }} || true
              
          else
            echo "‚ùå Deployment failed!"
            exit 1
          fi

  notify:
    needs: [test, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "üéâ Deployment completed successfully!"
        else
          echo "‚ö†Ô∏è Deployment encountered issues"
        fi

